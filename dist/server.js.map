{"version":3,"file":"server.js","names":["app","express","port","process","env","PORT","use","bodyParser","json","urlencoded","extended","text","type","req","res","next","header","method","status","apiLimiter","rateLimit","windowMs","API_RATE_WINDOW","max","API_RATE_LIMIT","standardHeaders","legacyHeaders","apiRouter","listen","error","Error","statusCode","send","message","console","log"],"sources":["../src/server.js"],"sourcesContent":["import \"dotenv/config\"; //preload all the environment values\r\n\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport apiRouter from './api/routes/index.js';\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n//parse application/json and look for raw text\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.text());\r\napp.use(bodyParser.json({ type: 'application/json' }));\r\n\r\n/**\r\n * Adding headers to our requests.\r\n */\r\napp.use((req, res, next) => {\r\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n  res.header(\r\n    \"Access-Control-Allow-Headers\",\r\n    \"Origin, X-Requested-With, Content-Type, Accept, Authorization\"\r\n  );\r\n  if (req.method === \"OPTIONS\") {\r\n    res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, PATCH\");\r\n    return res.status(200).json({});\r\n  }\r\n  next();\r\n});\r\n\r\n/* apply rate limit */\r\nimport rateLimit from 'express-rate-limit';\r\n\r\nconst apiLimiter = rateLimit({\r\n  windowMs: (process.env.API_RATE_WINDOW || 15) * 60 * 1000, // 15 minutes\r\n  max: process.env.API_RATE_LIMIT || 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes)\r\n  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\n  legacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n});\r\n\r\napp.use(\"/api\", apiLimiter, apiRouter);\r\napp.listen(port);\r\n\r\napp.use((req, res, next) => {\r\n  const error = Error(\"Not found\");\r\n  res.statusCode = 404;\r\n  res.send({ error: error.message });\r\n});\r\n\r\nconsole.log('SwapUp RESTful API server started on: ' + port);"],"mappings":";;AAAA;AAEA;AACA;AACA;AA4BA;AAA2C;AAhCnB;;AAMxB,MAAMA,GAAG,GAAG,IAAAC,gBAAO,GAAE;AACrB,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACC,IAAI,IAAI,IAAI;;AAErC;AACAL,GAAG,CAACM,GAAG,CAACC,mBAAU,CAACC,IAAI,EAAE,CAAC;AAC1BR,GAAG,CAACM,GAAG,CAACC,mBAAU,CAACE,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;AAClDV,GAAG,CAACM,GAAG,CAACC,mBAAU,CAACI,IAAI,EAAE,CAAC;AAC1BX,GAAG,CAACM,GAAG,CAACC,mBAAU,CAACC,IAAI,CAAC;EAAEI,IAAI,EAAE;AAAmB,CAAC,CAAC,CAAC;;AAEtD;AACA;AACA;AACAZ,GAAG,CAACM,GAAG,CAAC,CAACO,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAC1BD,GAAG,CAACE,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC;EAC9CF,GAAG,CAACE,MAAM,CACR,8BAA8B,EAC9B,+DAA+D,CAChE;EACD,IAAIH,GAAG,CAACI,MAAM,KAAK,SAAS,EAAE;IAC5BH,GAAG,CAACE,MAAM,CAAC,8BAA8B,EAAE,+BAA+B,CAAC;IAC3E,OAAOF,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC;EACjC;EACAO,IAAI,EAAE;AACR,CAAC,CAAC;;AAEF;;AAGA,MAAMI,UAAU,GAAG,IAAAC,yBAAS,EAAC;EAC3BC,QAAQ,EAAE,CAAClB,OAAO,CAACC,GAAG,CAACkB,eAAe,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI;EAAE;EAC3DC,GAAG,EAAEpB,OAAO,CAACC,GAAG,CAACoB,cAAc,IAAI,GAAG;EAAE;EACxCC,eAAe,EAAE,IAAI;EAAE;EACvBC,aAAa,EAAE,KAAK,CAAE;AACxB,CAAC,CAAC;;AAEF1B,GAAG,CAACM,GAAG,CAAC,MAAM,EAAEa,UAAU,EAAEQ,cAAS,CAAC;AACtC3B,GAAG,CAAC4B,MAAM,CAAC1B,IAAI,CAAC;AAEhBF,GAAG,CAACM,GAAG,CAAC,CAACO,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAC1B,MAAMc,KAAK,GAAGC,KAAK,CAAC,WAAW,CAAC;EAChChB,GAAG,CAACiB,UAAU,GAAG,GAAG;EACpBjB,GAAG,CAACkB,IAAI,CAAC;IAAEH,KAAK,EAAEA,KAAK,CAACI;EAAQ,CAAC,CAAC;AACpC,CAAC,CAAC;AAEFC,OAAO,CAACC,GAAG,CAAC,wCAAwC,GAAGjC,IAAI,CAAC"}