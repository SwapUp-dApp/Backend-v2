{"version":3,"file":"index.js","names":["env","process","NODE_ENV","config","configuration","db","sequelize","Sequelize","database","username","password","host","dialect","encrypt","port","dialectOptions","packetSize","options","useUTC","dateFirst","pool","max","min","acquire","idle","authenticate","console","log","error","users","require","swaps","sync","then","catch","err"],"sources":["../../../src/database/models/index.js"],"sourcesContent":["import Sequelize from \"sequelize\";\r\nimport configuration from \"../config.js\";\r\n\r\nconst env = process.env.NODE_ENV || \"development\";\r\nconst config = configuration[env];\r\nconst db = {};\r\n\r\nlet sequelize = new Sequelize({\r\n    database: config.database,\r\n    username: config.username,\r\n    password: config.password,\r\n    host: config.host, //tcp:swapup-dev.database.windows.net,1433\r\n    dialect: config.dialect || \"mssql\",\r\n    encrypt: true,\r\n    port: config.port,\r\n    dialectOptions: {\r\n        encrypt: true,\r\n        packetSize: 32768,\r\n        options: { useUTC: false, dateFirst: 1 }\r\n        //authentication: { options: { userName: dbServerCredentials.userName,//<svc account>@<my-company.com>@<database server>,  password: dbServerCredentials.password,// <svc account password> }, type: 'azure-active-directory-password', }, }, });\r\n    },\r\n    pool: {\r\n        max: 5,\r\n        min: 0,\r\n        acquire: 30000,\r\n        idle: 10000\r\n    }\r\n});\r\n\r\n\r\ntry {\r\n    sequelize.authenticate();\r\n    console.log('Connection has been established successfully.');\r\n} catch (error) {\r\n    console.error('Unable to connect to the database:', error);\r\n}\r\n\r\n\r\n//TODO: Manually expose all models here\r\ndb.users = require(\"./user.js\")(sequelize, Sequelize);\r\ndb.swaps = require(\"./swap.js\")(sequelize, Sequelize);\r\n\r\n// Synchronize all models with the database, creating tables if they don't exist\r\nsequelize.sync()\r\n    .then(() => {\r\n        console.log('All models were synchronized successfully.');\r\n    })\r\n    .catch(err => {\r\n        console.error('An error occurred while synchronizing models:', err);\r\n    });\r\n\r\ndb.sequelize = sequelize;\r\ndb.Sequelize = Sequelize;\r\n\r\n\r\nexport default db;\r\n"],"mappings":";;;;;;AAAA;AACA;AAAyC;AAEzC,MAAMA,GAAG,GAAGC,OAAO,CAACD,GAAG,CAACE,QAAQ,IAAI,aAAa;AACjD,MAAMC,MAAM,GAAGC,eAAa,CAACJ,GAAG,CAAC;AACjC,MAAMK,EAAE,GAAG,CAAC,CAAC;AAEb,IAAIC,SAAS,GAAG,IAAIC,kBAAS,CAAC;EAC1BC,QAAQ,EAAEL,MAAM,CAACK,QAAQ;EACzBC,QAAQ,EAAEN,MAAM,CAACM,QAAQ;EACzBC,QAAQ,EAAEP,MAAM,CAACO,QAAQ;EACzBC,IAAI,EAAER,MAAM,CAACQ,IAAI;EAAE;EACnBC,OAAO,EAAET,MAAM,CAACS,OAAO,IAAI,OAAO;EAClCC,OAAO,EAAE,IAAI;EACbC,IAAI,EAAEX,MAAM,CAACW,IAAI;EACjBC,cAAc,EAAE;IACZF,OAAO,EAAE,IAAI;IACbG,UAAU,EAAE,KAAK;IACjBC,OAAO,EAAE;MAAEC,MAAM,EAAE,KAAK;MAAEC,SAAS,EAAE;IAAE;IACvC;EACJ,CAAC;;EACDC,IAAI,EAAE;IACFC,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,CAAC;IACNC,OAAO,EAAE,KAAK;IACdC,IAAI,EAAE;EACV;AACJ,CAAC,CAAC;AAGF,IAAI;EACAlB,SAAS,CAACmB,YAAY,EAAE;EACxBC,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;AAChE,CAAC,CAAC,OAAOC,KAAK,EAAE;EACZF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;AAC9D;;AAGA;AACAvB,EAAE,CAACwB,KAAK,GAAGC,OAAO,CAAC,WAAW,CAAC,CAACxB,SAAS,EAAEC,kBAAS,CAAC;AACrDF,EAAE,CAAC0B,KAAK,GAAGD,OAAO,CAAC,WAAW,CAAC,CAACxB,SAAS,EAAEC,kBAAS,CAAC;;AAErD;AACAD,SAAS,CAAC0B,IAAI,EAAE,CACXC,IAAI,CAAC,MAAM;EACRP,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;AAC7D,CAAC,CAAC,CACDO,KAAK,CAACC,GAAG,IAAI;EACVT,OAAO,CAACE,KAAK,CAAC,+CAA+C,EAAEO,GAAG,CAAC;AACvE,CAAC,CAAC;AAEN9B,EAAE,CAACC,SAAS,GAAGA,SAAS;AACxBD,EAAE,CAACE,SAAS,GAAGA,kBAAS;AAAC,eAGVF,EAAE;AAAA"}